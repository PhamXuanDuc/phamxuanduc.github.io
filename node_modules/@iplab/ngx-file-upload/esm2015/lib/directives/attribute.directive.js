/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Host, Self } from '@angular/core';
import { FileUploadComponent } from '../components/multiple-file-upload/file-upload.component';
import { SimpleFileUploadComponent } from '../components/simple-file-upload/simple-file-upload.component';
export class FilesAcceptDirective {
    /**
     * @param {?} fileUpload
     * @param {?} simpleFileUpload
     */
    constructor(fileUpload, simpleFileUpload) {
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setAccept(this.accept);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('accept' in changes && changes['accept'].currentValue !== changes['accept'].previousValue) {
            this.setAccept(this.accept);
        }
    }
    /**
     * @private
     * @param {?} accept
     * @return {?}
     */
    setAccept(accept) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.acceptFiles(accept);
        }
    }
}
FilesAcceptDirective.decorators = [
    { type: Directive, args: [{
                selector: 'file-upload[accept]',
                host: { '[attr.accept]': 'accept ? accept : null' }
            },] }
];
/** @nocollapse */
FilesAcceptDirective.ctorParameters = () => [
    { type: FileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] },
    { type: SimpleFileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] }
];
FilesAcceptDirective.propDecorators = {
    accept: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilesAcceptDirective.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    FilesAcceptDirective.prototype.fileUpload;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpcGxhYi9uZ3gtZmlsZS11cGxvYWQvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hdHRyaWJ1dGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQy9GLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBUTFHLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBTzdCLFlBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztRQUoxRCxlQUFVLEdBQW9ELElBQUksQ0FBQztRQUtoRixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxnQkFBZ0IsQ0FBQztJQUNyRCxDQUFDOzs7O0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7OztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUNyQyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFO1lBQzNGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sU0FBUyxDQUFDLE1BQWM7UUFDNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFO1lBQzVDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7OztZQS9CSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsSUFBSSxFQUFFLEVBQUMsZUFBZSxFQUFFLHdCQUF3QixFQUFDO2FBQ3BEOzs7O1lBUlEsbUJBQW1CLHVCQWlCbkIsUUFBUSxZQUFJLElBQUksWUFBSSxJQUFJO1lBaEJ4Qix5QkFBeUIsdUJBaUJ6QixRQUFRLFlBQUksSUFBSSxZQUFJLElBQUk7OztxQkFQNUIsS0FBSzs7OztJQUFOLHNDQUNzQjs7Ozs7SUFFdEIsMENBQW9GIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2ltcGxlQ2hhbmdlcywgT3B0aW9uYWwsIEhvc3QsIFNlbGYsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9tdWx0aXBsZS1maWxlLXVwbG9hZC9maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9zaW1wbGUtZmlsZS11cGxvYWQvc2ltcGxlLWZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcblxyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWxlLXVwbG9hZFthY2NlcHRdJyxcclxuICAgIGhvc3Q6IHsnW2F0dHIuYWNjZXB0XSc6ICdhY2NlcHQgPyBhY2NlcHQgOiBudWxsJ31cclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVzQWNjZXB0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIGFjY2VwdDogc3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCB8IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50LFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBIb3N0KCkgQFNlbGYoKSBzaW1wbGVGaWxlVXBsb2FkOiBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5maWxlVXBsb2FkID0gZmlsZVVwbG9hZCB8fCBzaW1wbGVGaWxlVXBsb2FkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRBY2NlcHQodGhpcy5hY2NlcHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCdhY2NlcHQnIGluIGNoYW5nZXMgJiYgY2hhbmdlc1snYWNjZXB0J10uY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzWydhY2NlcHQnXS5wcmV2aW91c1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QWNjZXB0KHRoaXMuYWNjZXB0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRBY2NlcHQoYWNjZXB0OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5maWxlVXBsb2FkICYmIHRoaXMuZmlsZVVwbG9hZC5jb250cm9sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZVVwbG9hZC5jb250cm9sLmFjY2VwdEZpbGVzKGFjY2VwdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==