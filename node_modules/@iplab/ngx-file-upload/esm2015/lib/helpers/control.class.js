/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, Subject } from 'rxjs';
import { IsNullOrEmpty } from './helpers.class';
/** @enum {number} */
const STATUS = {
    INVALID: 0,
    VALID: 1,
    DISABLED: 2,
};
export { STATUS };
STATUS[STATUS.INVALID] = 'INVALID';
STATUS[STATUS.VALID] = 'VALID';
STATUS[STATUS.DISABLED] = 'DISABLED';
/** @enum {string} */
const FileEvent = {
    click: 'click',
    focus: 'focus',
    blur: 'blur',
};
export { FileEvent };
export class FileUploadControl {
    /**
     * @param {?=} validators
     */
    constructor(validators) {
        this.files = new Set();
        this.listVisible = true;
        this.status = STATUS.VALID;
        this.errors = [];
        this.validators = [];
        this.multipleEnabled = true;
        this.multipleChanged = new BehaviorSubject(this.multipleEnabled);
        this.statusChanged = new Subject();
        this.eventsChanged = new Subject();
        this.accept = null;
        this.acceptChanged = new BehaviorSubject(this.accept);
        /**
         * track status `VALID`, `INVALID` or `DISABLED`
         */
        this.statusChanges = this.statusChanged.asObservable();
        /**
         * emit an event every time the value of the control
         * changes.
         * Initially returns last value
         */
        this.valueChanges = new BehaviorSubject([]);
        /**
         * \@internal
         * used to trigger layout change for list visibility
         */
        this.listVisibilityChanges = new BehaviorSubject(this.listVisible);
        /**
         * track changed on accept attribute
         */
        this.acceptChanges = this.acceptChanged.asObservable();
        /**
         * emit an event every time user programmatically ask for certain event
         */
        this.eventsChanges = this.eventsChanged.asObservable();
        /**
         * track changed on multiple attribute
         */
        this.multipleChanges = this.multipleChanged.asObservable();
        this.defineValidators(validators);
    }
    /**
     * set functions that determines the synchronous validity of this control.
     * @template THIS
     * @this {THIS}
     * @param {?} newValidators
     * @return {THIS}
     */
    setValidators(newValidators) {
        (/** @type {?} */ (this)).defineValidators(newValidators);
        (/** @type {?} */ (this)).validate();
        return (/** @type {?} */ (this));
    }
    /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    defineValidators(validators) {
        if (!IsNullOrEmpty(validators)) {
            this.validators = Array.isArray(validators) ? [...validators] : [validators];
        }
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} file
     * @return {THIS}
     */
    addFile(file) {
        /**
         * if multiple is disabled and one file exists
         * clear it and reupload a new one
         */
        if (!(/** @type {?} */ (this)).multipleEnabled && (/** @type {?} */ (this)).files.size === 1) {
            (/** @type {?} */ (this)).files.clear();
        }
        (/** @type {?} */ (this)).files.add(file);
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).valueChanges.next(Array.from((/** @type {?} */ (this)).files.values()));
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} file
     * @return {THIS}
     */
    removeFile(file) {
        if (!(/** @type {?} */ (this)).disabled) {
            (/** @type {?} */ (this)).files.delete(file);
            (/** @type {?} */ (this)).validate();
            (/** @type {?} */ (this)).valueChanges.next(Array.from((/** @type {?} */ (this)).files.values()));
        }
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} files
     * @return {THIS}
     */
    addFiles(files) {
        (/** @type {?} */ (this)).addMultipleFiles(Array.from(files));
        return (/** @type {?} */ (this));
    }
    /**
     * \@internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     * @private
     * @param {?} files
     * @return {?}
     */
    addMultipleFiles(files) {
        if (!this.multipleEnabled && !IsNullOrEmpty(files)) {
            // add only one file
            this.addFile(files[0]);
            return;
        }
        files.forEach((/**
         * @param {?} file
         * @return {?}
         */
        file => this.files.add(file)));
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
    }
    /**
     * @return {?}
     */
    get valid() {
        return this.errors.length === 0 && this.status !== STATUS.DISABLED;
    }
    /**
     * @return {?}
     */
    get invalid() {
        return this.errors.length > 0;
    }
    /**
     * @return {?}
     */
    getError() {
        return this.errors;
    }
    /**
     * number of uploaded files
     * @return {?}
     */
    get size() {
        return this.files.size;
    }
    /**
     * return list of Files
     * @return {?}
     */
    get value() {
        return Array.from(this.files.values());
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} files
     * @return {THIS}
     */
    setValue(files) {
        (/** @type {?} */ (this)).files.clear();
        if (files instanceof Array) {
            (/** @type {?} */ (this)).addMultipleFiles(files);
        }
        else {
            throw Error(`FormControl.setValue was provided with wrong argument type, ${files} was provided instead Array<File>`);
        }
        return (/** @type {?} */ (this));
    }
    /**
     * reset the control
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    clear() {
        (/** @type {?} */ (this)).files.clear();
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).valueChanges.next(Array.from((/** @type {?} */ (this)).files.values()));
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    get isListVisible() {
        return this.listVisible;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isVisible
     * @return {THIS}
     */
    setListVisibility(isVisible = true) {
        (/** @type {?} */ (this)).listVisible = isVisible;
        (/** @type {?} */ (this)).listVisibilityChanges.next((/** @type {?} */ (this)).listVisible);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this.status === STATUS.DISABLED;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isEnabled
     * @return {THIS}
     */
    enable(isEnabled = true) {
        (/** @type {?} */ (this)).status = isEnabled ? STATUS.VALID : STATUS.DISABLED;
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).statusChanged.next((/** @type {?} */ (this)).status);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isDisabled
     * @return {THIS}
     */
    disable(isDisabled = true) {
        (/** @type {?} */ (this)).status = isDisabled ? STATUS.DISABLED : STATUS.VALID;
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).statusChanged.next((/** @type {?} */ (this)).status);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    click() {
        (/** @type {?} */ (this)).eventsChanged.next(FileEvent.click);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    focus() {
        (/** @type {?} */ (this)).eventsChanged.next(FileEvent.focus);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    blur() {
        (/** @type {?} */ (this)).eventsChanged.next(FileEvent.blur);
        return (/** @type {?} */ (this));
    }
    /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     * @template THIS
     * @this {THIS}
     * @param {?} accept
     * @return {THIS}
     */
    acceptFiles(accept) {
        (/** @type {?} */ (this)).accept = accept;
        (/** @type {?} */ (this)).acceptChanged.next((/** @type {?} */ (this)).accept);
        return (/** @type {?} */ (this));
    }
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    acceptAll() {
        (/** @type {?} */ (this)).accept = null;
        (/** @type {?} */ (this)).acceptChanged.next((/** @type {?} */ (this)).accept);
        return (/** @type {?} */ (this));
    }
    /**
     * @return {?}
     */
    get isMultiple() {
        return this.multipleEnabled;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isEnabled
     * @return {THIS}
     */
    multiple(isEnabled = true) {
        (/** @type {?} */ (this)).multipleEnabled = isEnabled;
        (/** @type {?} */ (this)).multipleChanged.next((/** @type {?} */ (this)).multipleEnabled);
        return (/** @type {?} */ (this));
    }
    /**
     * @private
     * @return {?}
     */
    validate() {
        if (this.status !== STATUS.DISABLED) {
            /** @type {?} */
            const currentState = this.valid;
            this.errors = this.validators.map((/**
             * @param {?} validator
             * @return {?}
             */
            (validator) => validator(this))).filter((/**
             * @param {?} isInvalid
             * @return {?}
             */
            (isInvalid) => isInvalid));
            if (currentState !== this.valid) {
                this.statusChanged.next(this.valid ? STATUS.VALID : STATUS.INVALID);
            }
        }
        else {
            this.errors.length = 0;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.files;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.listVisible;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.status;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.errors;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.validators;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.multipleEnabled;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.multipleChanged;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.statusChanged;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.eventsChanged;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.acceptChanged;
    /**
     * track status `VALID`, `INVALID` or `DISABLED`
     * @type {?}
     */
    FileUploadControl.prototype.statusChanges;
    /**
     * emit an event every time the value of the control
     * changes.
     * Initially returns last value
     * @type {?}
     */
    FileUploadControl.prototype.valueChanges;
    /**
     * \@internal
     * used to trigger layout change for list visibility
     * @type {?}
     */
    FileUploadControl.prototype.listVisibilityChanges;
    /**
     * track changed on accept attribute
     * @type {?}
     */
    FileUploadControl.prototype.acceptChanges;
    /**
     * emit an event every time user programmatically ask for certain event
     * @type {?}
     */
    FileUploadControl.prototype.eventsChanges;
    /**
     * track changed on multiple attribute
     * @type {?}
     */
    FileUploadControl.prototype.multipleChanges;
}
//# sourceMappingURL=data:application/json;base64,