/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, ElementRef, HostListener, Renderer2, HostBinding, Inject, ViewChild, ContentChild, TemplateRef, Component } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FileUploadControl } from '../../helpers/control.class';
import { IsNullOrEmpty } from '../../helpers/helpers.class';
import { FileUploadService } from '../../services/file-upload.service';
import { DRAGOVER, TOUCHED } from './../multiple-file-upload/file-upload.component';
var FileUploadAttributeComponent = /** @class */ (function () {
    function FileUploadAttributeComponent(fileUploadService, hostElementRef, renderer, document) {
        var _this = this;
        this.fileUploadService = fileUploadService;
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.document = document;
        this.control = null;
        this.templateRef = null;
        this.hooks = [];
        this.subscriptions = [];
        this.onTouch = (/**
         * @return {?}
         */
        function () {
            _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
        });
    }
    /**
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
    };
    /**
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.fileUploadService.isFileDragDropAvailable()) {
            this.setEvents();
            this.checkAndMarkAsDisabled();
        }
    };
    /**
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.hooks.forEach((/**
         * @param {?} hook
         * @return {?}
         */
        function (hook) { return hook(); }));
        this.hooks.length = 0;
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { return subscription.unsubscribe(); }));
        this.subscriptions.length = 0;
    };
    Object.defineProperty(FileUploadAttributeComponent.prototype, "hasFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this.control.isListVisible && this.control.size > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadAttributeComponent.prototype, "isInvalid", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.control.disabled && this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.setEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.document, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.preventDragEvents(event); })));
        }));
        ['dragover', 'dragenter'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onDragOver(event); })));
        }));
        ['dragleave', 'dragend', 'drop'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (_this.control.disabled && eventName === 'dragleave' || eventName !== 'dragleave') {
                    _this.onDragLeave(event);
                }
            })));
        }));
        ['dragleave'].forEach((/**
         * @param {?} eventName
         * @return {?}
         */
        function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.overlay.nativeElement, eventName, (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onDragLeave(event); })));
        }));
        this.subscriptions.push(this.control.statusChanges.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        function (status) { return _this.checkAndMarkAsDisabled(); })));
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.checkAndMarkAsDisabled = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.preventDragEvents = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    /**
     * on file over add class name
     */
    /**
     * on file over add class name
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.onDragOver = /**
     * on file over add class name
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * on mouse out remove class name
     */
    /**
     * on mouse out remove class name
     * @private
     * @param {?} event
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.onDragLeave = /**
     * on mouse out remove class name
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileUploadAttributeComponent.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.control.disabled) {
            return;
        }
        /** @type {?} */
        var files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    };
    FileUploadAttributeComponent.decorators = [
        { type: Component, args: [{
                    selector: "[file-drop-zone]",
                    template: "\n        <ng-content></ng-content>\n        <div #overlay class=\"overlay\" *ngIf=\"fileUploadService.isFileDragDropAvailable()\">\n\n            <div class=\"upload-input\">\n                <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate\"></ng-container>\n\n                <ng-template #defaultTemplate>\n                    <file-upload-drop-zone>\n                        <b>Drop</b> it here\n                    </file-upload-drop-zone>\n                </ng-template>\n            </div>\n        </div>\n    ",
                    providers: [
                        FileUploadService
                    ],
                    styles: [":host{position:relative;display:block}:host .overlay{display:none;background:rgba(255,255,255,.8);outline:#92b0b3 dashed 2px;outline-offset:-10px;position:absolute;top:0;left:0;right:0;bottom:0}:host(.dragover:not(.disabled)) .overlay{display:block}:host ::ng-deep .icon{margin:0 auto 10px}:host ::ng-deep .icon svg{fill:#80a9d2}.upload-input{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transition:.15s ease-in-out;transition:.15s ease-in-out}"]
                }] }
    ];
    /** @nocollapse */
    FileUploadAttributeComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    FileUploadAttributeComponent.propDecorators = {
        control: [{ type: Input }],
        overlay: [{ type: ViewChild, args: ['overlay', { static: false },] }],
        templateRef: [{ type: ContentChild, args: ['placeholder', { static: false },] }],
        hasFiles: [{ type: HostBinding, args: ['class.has-files',] }],
        isInvalid: [{ type: HostBinding, args: ['class.ng-invalid',] }],
        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
    };
    return FileUploadAttributeComponent;
}());
export { FileUploadAttributeComponent };
if (false) {
    /** @type {?} */
    FileUploadAttributeComponent.prototype.control;
    /** @type {?} */
    FileUploadAttributeComponent.prototype.overlay;
    /** @type {?} */
    FileUploadAttributeComponent.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    FileUploadAttributeComponent.prototype.hooks;
    /**
     * @type {?}
     * @private
     */
    FileUploadAttributeComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    FileUploadAttributeComponent.prototype.onTouch;
    /** @type {?} */
    FileUploadAttributeComponent.prototype.fileUploadService;
    /**
     * @type {?}
     * @private
     */
    FileUploadAttributeComponent.prototype.hostElementRef;
    /**
     * @type {?}
     * @private
     */
    FileUploadAttributeComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FileUploadAttributeComponent.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,