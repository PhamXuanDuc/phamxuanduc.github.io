/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BehaviorSubject, Subject } from 'rxjs';
import { IsNullOrEmpty } from './helpers.class';
/** @enum {number} */
var STATUS = {
    INVALID: 0,
    VALID: 1,
    DISABLED: 2,
};
export { STATUS };
STATUS[STATUS.INVALID] = 'INVALID';
STATUS[STATUS.VALID] = 'VALID';
STATUS[STATUS.DISABLED] = 'DISABLED';
/** @enum {string} */
var FileEvent = {
    click: 'click',
    focus: 'focus',
    blur: 'blur',
};
export { FileEvent };
var FileUploadControl = /** @class */ (function () {
    function FileUploadControl(validators) {
        this.files = new Set();
        this.listVisible = true;
        this.status = STATUS.VALID;
        this.errors = [];
        this.validators = [];
        this.multipleEnabled = true;
        this.multipleChanged = new BehaviorSubject(this.multipleEnabled);
        this.statusChanged = new Subject();
        this.eventsChanged = new Subject();
        this.accept = null;
        this.acceptChanged = new BehaviorSubject(this.accept);
        /**
         * track status `VALID`, `INVALID` or `DISABLED`
         */
        this.statusChanges = this.statusChanged.asObservable();
        /**
         * emit an event every time the value of the control
         * changes.
         * Initially returns last value
         */
        this.valueChanges = new BehaviorSubject([]);
        /**
         * \@internal
         * used to trigger layout change for list visibility
         */
        this.listVisibilityChanges = new BehaviorSubject(this.listVisible);
        /**
         * track changed on accept attribute
         */
        this.acceptChanges = this.acceptChanged.asObservable();
        /**
         * emit an event every time user programmatically ask for certain event
         */
        this.eventsChanges = this.eventsChanged.asObservable();
        /**
         * track changed on multiple attribute
         */
        this.multipleChanges = this.multipleChanged.asObservable();
        this.defineValidators(validators);
    }
    /**
     * set functions that determines the synchronous validity of this control.
     */
    /**
     * set functions that determines the synchronous validity of this control.
     * @template THIS
     * @this {THIS}
     * @param {?} newValidators
     * @return {THIS}
     */
    FileUploadControl.prototype.setValidators = /**
     * set functions that determines the synchronous validity of this control.
     * @template THIS
     * @this {THIS}
     * @param {?} newValidators
     * @return {THIS}
     */
    function (newValidators) {
        (/** @type {?} */ (this)).defineValidators(newValidators);
        (/** @type {?} */ (this)).validate();
        return (/** @type {?} */ (this));
    };
    /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    FileUploadControl.prototype.defineValidators = /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    function (validators) {
        if (!IsNullOrEmpty(validators)) {
            this.validators = Array.isArray(validators) ? tslib_1.__spread(validators) : [validators];
        }
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} file
     * @return {THIS}
     */
    FileUploadControl.prototype.addFile = /**
     * @template THIS
     * @this {THIS}
     * @param {?} file
     * @return {THIS}
     */
    function (file) {
        /**
         * if multiple is disabled and one file exists
         * clear it and reupload a new one
         */
        if (!(/** @type {?} */ (this)).multipleEnabled && (/** @type {?} */ (this)).files.size === 1) {
            (/** @type {?} */ (this)).files.clear();
        }
        (/** @type {?} */ (this)).files.add(file);
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).valueChanges.next(Array.from((/** @type {?} */ (this)).files.values()));
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} file
     * @return {THIS}
     */
    FileUploadControl.prototype.removeFile = /**
     * @template THIS
     * @this {THIS}
     * @param {?} file
     * @return {THIS}
     */
    function (file) {
        if (!(/** @type {?} */ (this)).disabled) {
            (/** @type {?} */ (this)).files.delete(file);
            (/** @type {?} */ (this)).validate();
            (/** @type {?} */ (this)).valueChanges.next(Array.from((/** @type {?} */ (this)).files.values()));
        }
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} files
     * @return {THIS}
     */
    FileUploadControl.prototype.addFiles = /**
     * @template THIS
     * @this {THIS}
     * @param {?} files
     * @return {THIS}
     */
    function (files) {
        (/** @type {?} */ (this)).addMultipleFiles(Array.from(files));
        return (/** @type {?} */ (this));
    };
    /**
     * @internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     */
    /**
     * \@internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     * @private
     * @param {?} files
     * @return {?}
     */
    FileUploadControl.prototype.addMultipleFiles = /**
     * \@internal
     * used to prevent valueChanges emit more times
     * when multiple files are uploaded
     * @private
     * @param {?} files
     * @return {?}
     */
    function (files) {
        var _this = this;
        if (!this.multipleEnabled && !IsNullOrEmpty(files)) {
            // add only one file
            this.addFile(files[0]);
            return;
        }
        files.forEach((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return _this.files.add(file); }));
        this.validate();
        this.valueChanges.next(Array.from(this.files.values()));
    };
    Object.defineProperty(FileUploadControl.prototype, "valid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.errors.length === 0 && this.status !== STATUS.DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadControl.prototype, "invalid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.errors.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FileUploadControl.prototype.getError = /**
     * @return {?}
     */
    function () {
        return this.errors;
    };
    Object.defineProperty(FileUploadControl.prototype, "size", {
        /**
         * number of uploaded files
         */
        get: /**
         * number of uploaded files
         * @return {?}
         */
        function () {
            return this.files.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadControl.prototype, "value", {
        /**
         * return list of Files
         */
        get: /**
         * return list of Files
         * @return {?}
         */
        function () {
            return Array.from(this.files.values());
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} files
     * @return {THIS}
     */
    FileUploadControl.prototype.setValue = /**
     * @template THIS
     * @this {THIS}
     * @param {?} files
     * @return {THIS}
     */
    function (files) {
        (/** @type {?} */ (this)).files.clear();
        if (files instanceof Array) {
            (/** @type {?} */ (this)).addMultipleFiles(files);
        }
        else {
            throw Error("FormControl.setValue was provided with wrong argument type, " + files + " was provided instead Array<File>");
        }
        return (/** @type {?} */ (this));
    };
    /**
     * reset the control
     */
    /**
     * reset the control
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FileUploadControl.prototype.clear = /**
     * reset the control
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).files.clear();
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).valueChanges.next(Array.from((/** @type {?} */ (this)).files.values()));
        return (/** @type {?} */ (this));
    };
    Object.defineProperty(FileUploadControl.prototype, "isListVisible", {
        get: /**
         * @return {?}
         */
        function () {
            return this.listVisible;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isVisible
     * @return {THIS}
     */
    FileUploadControl.prototype.setListVisibility = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isVisible
     * @return {THIS}
     */
    function (isVisible) {
        if (isVisible === void 0) { isVisible = true; }
        (/** @type {?} */ (this)).listVisible = isVisible;
        (/** @type {?} */ (this)).listVisibilityChanges.next((/** @type {?} */ (this)).listVisible);
        return (/** @type {?} */ (this));
    };
    Object.defineProperty(FileUploadControl.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this.status === STATUS.DISABLED;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isEnabled
     * @return {THIS}
     */
    FileUploadControl.prototype.enable = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isEnabled
     * @return {THIS}
     */
    function (isEnabled) {
        if (isEnabled === void 0) { isEnabled = true; }
        (/** @type {?} */ (this)).status = isEnabled ? STATUS.VALID : STATUS.DISABLED;
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).statusChanged.next((/** @type {?} */ (this)).status);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isDisabled
     * @return {THIS}
     */
    FileUploadControl.prototype.disable = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isDisabled
     * @return {THIS}
     */
    function (isDisabled) {
        if (isDisabled === void 0) { isDisabled = true; }
        (/** @type {?} */ (this)).status = isDisabled ? STATUS.DISABLED : STATUS.VALID;
        (/** @type {?} */ (this)).validate();
        (/** @type {?} */ (this)).statusChanged.next((/** @type {?} */ (this)).status);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FileUploadControl.prototype.click = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).eventsChanged.next(FileEvent.click);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FileUploadControl.prototype.focus = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).eventsChanged.next(FileEvent.focus);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FileUploadControl.prototype.blur = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).eventsChanged.next(FileEvent.blur);
        return (/** @type {?} */ (this));
    };
    /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     */
    /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     * @template THIS
     * @this {THIS}
     * @param {?} accept
     * @return {THIS}
     */
    FileUploadControl.prototype.acceptFiles = /**
     * specifies the types of files that the server accepts
     *
     * ### Example
     *
     * ```
     * acceptFiles("file_extension|audio/*|video/*|image/*|media_type")
     * ```
     *
     * To specify more than one value, separate the values with a comma (e.g. acceptFiles("audio/*,video/*,image/*").
     *
     * @template THIS
     * @this {THIS}
     * @param {?} accept
     * @return {THIS}
     */
    function (accept) {
        (/** @type {?} */ (this)).accept = accept;
        (/** @type {?} */ (this)).acceptChanged.next((/** @type {?} */ (this)).accept);
        return (/** @type {?} */ (this));
    };
    /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    FileUploadControl.prototype.acceptAll = /**
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    function () {
        (/** @type {?} */ (this)).accept = null;
        (/** @type {?} */ (this)).acceptChanged.next((/** @type {?} */ (this)).accept);
        return (/** @type {?} */ (this));
    };
    Object.defineProperty(FileUploadControl.prototype, "isMultiple", {
        get: /**
         * @return {?}
         */
        function () {
            return this.multipleEnabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isEnabled
     * @return {THIS}
     */
    FileUploadControl.prototype.multiple = /**
     * @template THIS
     * @this {THIS}
     * @param {?=} isEnabled
     * @return {THIS}
     */
    function (isEnabled) {
        if (isEnabled === void 0) { isEnabled = true; }
        (/** @type {?} */ (this)).multipleEnabled = isEnabled;
        (/** @type {?} */ (this)).multipleChanged.next((/** @type {?} */ (this)).multipleEnabled);
        return (/** @type {?} */ (this));
    };
    /**
     * @private
     * @return {?}
     */
    FileUploadControl.prototype.validate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.status !== STATUS.DISABLED) {
            /** @type {?} */
            var currentState = this.valid;
            this.errors = this.validators.map((/**
             * @param {?} validator
             * @return {?}
             */
            function (validator) { return validator(_this); })).filter((/**
             * @param {?} isInvalid
             * @return {?}
             */
            function (isInvalid) { return isInvalid; }));
            if (currentState !== this.valid) {
                this.statusChanged.next(this.valid ? STATUS.VALID : STATUS.INVALID);
            }
        }
        else {
            this.errors.length = 0;
        }
    };
    return FileUploadControl;
}());
export { FileUploadControl };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.files;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.listVisible;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.status;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.errors;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.validators;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.multipleEnabled;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.multipleChanged;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.statusChanged;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.eventsChanged;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    FileUploadControl.prototype.acceptChanged;
    /**
     * track status `VALID`, `INVALID` or `DISABLED`
     * @type {?}
     */
    FileUploadControl.prototype.statusChanges;
    /**
     * emit an event every time the value of the control
     * changes.
     * Initially returns last value
     * @type {?}
     */
    FileUploadControl.prototype.valueChanges;
    /**
     * \@internal
     * used to trigger layout change for list visibility
     * @type {?}
     */
    FileUploadControl.prototype.listVisibilityChanges;
    /**
     * track changed on accept attribute
     * @type {?}
     */
    FileUploadControl.prototype.acceptChanges;
    /**
     * emit an event every time user programmatically ask for certain event
     * @type {?}
     */
    FileUploadControl.prototype.eventsChanges;
    /**
     * track changed on multiple attribute
     * @type {?}
     */
    FileUploadControl.prototype.multipleChanges;
}
//# sourceMappingURL=data:application/json;base64,