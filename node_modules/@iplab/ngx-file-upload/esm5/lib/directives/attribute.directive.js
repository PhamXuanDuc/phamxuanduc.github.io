/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Host, Self } from '@angular/core';
import { FileUploadComponent } from '../components/multiple-file-upload/file-upload.component';
import { SimpleFileUploadComponent } from '../components/simple-file-upload/simple-file-upload.component';
var FilesAcceptDirective = /** @class */ (function () {
    function FilesAcceptDirective(fileUpload, simpleFileUpload) {
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    /**
     * @return {?}
     */
    FilesAcceptDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.setAccept(this.accept);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FilesAcceptDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('accept' in changes && changes['accept'].currentValue !== changes['accept'].previousValue) {
            this.setAccept(this.accept);
        }
    };
    /**
     * @private
     * @param {?} accept
     * @return {?}
     */
    FilesAcceptDirective.prototype.setAccept = /**
     * @private
     * @param {?} accept
     * @return {?}
     */
    function (accept) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.acceptFiles(accept);
        }
    };
    FilesAcceptDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'file-upload[accept]',
                    host: { '[attr.accept]': 'accept ? accept : null' }
                },] }
    ];
    /** @nocollapse */
    FilesAcceptDirective.ctorParameters = function () { return [
        { type: FileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] },
        { type: SimpleFileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] }
    ]; };
    FilesAcceptDirective.propDecorators = {
        accept: [{ type: Input }]
    };
    return FilesAcceptDirective;
}());
export { FilesAcceptDirective };
if (false) {
    /** @type {?} */
    FilesAcceptDirective.prototype.accept;
    /**
     * @type {?}
     * @private
     */
    FilesAcceptDirective.prototype.fileUpload;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BpcGxhYi9uZ3gtZmlsZS11cGxvYWQvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9hdHRyaWJ1dGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQy9GLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBSTFHO0lBV0ksOEJBQ2dDLFVBQStCLEVBQy9CLGdCQUEyQztRQUoxRCxlQUFVLEdBQW9ELElBQUksQ0FBQztRQUtoRixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsSUFBSSxnQkFBZ0IsQ0FBQztJQUNyRCxDQUFDOzs7O0lBRU0sOENBQWU7OztJQUF0QjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRU0sMENBQVc7Ozs7SUFBbEIsVUFBbUIsT0FBc0I7UUFDckMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxZQUFZLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRTtZQUMzRixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQjtJQUNMLENBQUM7Ozs7OztJQUVPLHdDQUFTOzs7OztJQUFqQixVQUFrQixNQUFjO1FBQzVCLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDOztnQkEvQkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLElBQUksRUFBRSxFQUFDLGVBQWUsRUFBRSx3QkFBd0IsRUFBQztpQkFDcEQ7Ozs7Z0JBUlEsbUJBQW1CLHVCQWlCbkIsUUFBUSxZQUFJLElBQUksWUFBSSxJQUFJO2dCQWhCeEIseUJBQXlCLHVCQWlCekIsUUFBUSxZQUFJLElBQUksWUFBSSxJQUFJOzs7eUJBUDVCLEtBQUs7O0lBMEJWLDJCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0E1Qlksb0JBQW9COzs7SUFFN0Isc0NBQ3NCOzs7OztJQUV0QiwwQ0FBb0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSG9zdCwgU2VsZiwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL211bHRpcGxlLWZpbGUtdXBsb2FkL2ZpbGUtdXBsb2FkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnRzL3NpbXBsZS1maWxlLXVwbG9hZC9zaW1wbGUtZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuXHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ2ZpbGUtdXBsb2FkW2FjY2VwdF0nLFxyXG4gICAgaG9zdDogeydbYXR0ci5hY2NlcHRdJzogJ2FjY2VwdCA/IGFjY2VwdCA6IG51bGwnfVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsZXNBY2NlcHREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgYWNjZXB0OiBzdHJpbmc7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBmaWxlVXBsb2FkOiBGaWxlVXBsb2FkQ29tcG9uZW50IHwgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEhvc3QoKSBAU2VsZigpIGZpbGVVcGxvYWQ6IEZpbGVVcGxvYWRDb21wb25lbnQsXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEhvc3QoKSBAU2VsZigpIHNpbXBsZUZpbGVVcGxvYWQ6IFNpbXBsZUZpbGVVcGxvYWRDb21wb25lbnQpIHtcclxuICAgICAgICB0aGlzLmZpbGVVcGxvYWQgPSBmaWxlVXBsb2FkIHx8IHNpbXBsZUZpbGVVcGxvYWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldEFjY2VwdCh0aGlzLmFjY2VwdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoJ2FjY2VwdCcgaW4gY2hhbmdlcyAmJiBjaGFuZ2VzWydhY2NlcHQnXS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXNbJ2FjY2VwdCddLnByZXZpb3VzVmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY2NlcHQodGhpcy5hY2NlcHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEFjY2VwdChhY2NlcHQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbGVVcGxvYWQgJiYgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5maWxlVXBsb2FkLmNvbnRyb2wuYWNjZXB0RmlsZXMoYWNjZXB0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19